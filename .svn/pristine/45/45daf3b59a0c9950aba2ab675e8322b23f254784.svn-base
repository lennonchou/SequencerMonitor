var connection = require('../mysqlConnection')
var mysql = require('mysql')
var helper = require('../helper.js')
var async = require('async')
var log = require('../log.js')
var _ = require('underscore')

exports.create = function (req, res) {
    // create new sample label
    var body = req.body;
    var patientId = body.patientId;
    var sampleNumber = body.sampleNumber;
    var material = body.material;
    var site = body.site;
    var tumorCellContent = body.tumorCellContent;
    var pathologicDiagnosis = body.pathologicDiagnosis;
    var inspectionDate = body.inspectionDate;
    var comment = body.comment;
    // need to change later
    var confirmed = req.confirmed || true;
    if (!helper.validationCheck([patientId, sampleNumber, inspectionDate])) {
        return res.status(400).json({ success: false, error: 'Missing key parameters' });
    } else {
        connection.myQuery(helper.constructSelectSQL(['status AS fileStatus', 'id AS fileId'], 'File', [{ name: 'sampleNumber', exact: 1 }]), [sampleNumber])
            .then(function (file) {
                // require user to confirm?
                if (!file.length && !confirmed) {
                    return res.json({success: false, error: 'Cannot find matching file, please verify'});
                }
                var columns = ['patientId', 'sampleNumber', 'material', 'site', 'tumorCellContent', 'pathologicDiagnosis', 'inspectionDate', 'comment', 'createTime'];
                return connection.myQuery(helper.constructInsertSQL(columns, 'Sample'),
                    [patientId, sampleNumber, material, site, tumorCellContent, pathologicDiagnosis, inspectionDate, comment]);
            })
            .then(function (result) {
                var id = result.insertId;
                return res.json({ success: true, sampleId: id });
            })
            .fail(function (err) {
                log.d('Error when creating new sample: ' + err.message);
                return res.status(500).json({ success: false, error: err.code, message: err.message || 'Unknown' });
            });
    }
};

exports.edit = function (req, res) {
    // edit sample label
    var body = req.body;
    var patientId = body.patientId;
    // var sampleNumber = body.sampleNumber;
    var material = body.material;
    var site = body.site;
    var tumorCellContent = body.tumorCellContent;
    var pathologicDiagnosis = body.pathologicDiagnosis;
    // var inspectionDate = body.inspectionDate;
    var comment = body.comment;
    var id = body.id;
    if (!helper.validationCheck([id])) {
        return res.status(400).json({ success: false, error: 'Missing key parameters' });
    } else {
        connection.myQuery(helper.constructUpdateSQL(['material', 'site', 'tumorCellContent', 'pathologicDiagnosis', 'comment'], 'Sample', [{ name: 'id', exact: 1 }]),
            [material, site, tumorCellContent, pathologicDiagnosis, comment, id])
            .then(function (result) {
                return res.json({ success: true, sampleId: id });
            })
            .fail(function (err) {
                log.d('Error when creating new sample: ' + err.message);
                return res.status(500).json({ success: false, error: err.code, message: err.message || 'Unknown' });
            });
    }
};

exports.delete = function(req, res) {
    var body = req.body;
    var id = body.id;
    if (!helper.validationCheck([id])) {
        return res.status(400).json({ success: false, error: 'Missing id' });
    }
    connection.myQuery('DELETE FROM Sample WHERE id = ?', [id])
    .then(function(result) {
        if (result.affectedRows) {
            return res.json({success: true, deletedId: id});
        }
        log.d('Cannot delete because there is no such sample');
        return res.status(401).json({success: false, error: 'No such sample' });
    })
    .fail(function(err) {
        log.d('Error when deleting exsting sample: ' + err.message);
        return res.status(500).json({ success: false, error: err.code, message: err.message || 'Unknown' });
    });
};

exports.search = function (req, res) {
    // search based on name, gender, hospitalNumber, pathologicNumber
    var keys = [];
    var values = [];
    var columns = ['Patient.id', 'Patient.name', 'gender', 'dob', 'hospitalNumber', 'pathologicNumber', 'clinicalDiagnosis', 'Patient.comment AS patientComment', 
        'Sample.id AS sampleId', 'Sample.sampleNumber', 'material', 'site', 'tumorCellContent',
        'pathologicDiagnosis', 'inspectionDate', 'Sample.comment AS sampleComment', 'File.status AS sampleStatus', 'File.url'];
    var name = req.query.name;
    var gender = req.query.gender;
    var hospitalNumber = req.query.hospitalNumber;
    var pathologicNumber = req.query.pathologicNumber;
    var inspectionDateLow = req.query.inspectionDateLow;
    var inspectionDateHigh = req.query.inspectionDateHigh;
    var sampleNumber = req.query.sampleNumber;
    if (name && name.length) {
        keys.push({ name: 'Patient.name' });
        values.push('%' + name + '%');
    }
    // if (gender && gender.length) {
    //     keys.push({ name: 'Patient.gender', exact: 1 });
    //     values.push(gender);
    // }
    if (hospitalNumber && hospitalNumber.length) {
        keys.push({ name: 'Patient.hospitalNumber' });
        values.push(hospitalNumber + '%');
    }
    if (pathologicNumber && pathologicNumber.length) {
        keys.push({ name: 'Patient.pathologicNumber' });
        values.push(pathologicNumber + '%');
    }
    if (inspectionDateLow && inspectionDateLow.length) {
        keys.push({ name: 'Sample.inspectionDate', low: 1 });
        values.push(pathologicNumber);
    }
    if (inspectionDateHigh && inspectionDateHigh.length) {
        keys.push({ name: 'Sample.inspectionDate', high: 1 });
        values.push(pathologicNumber);
    }
    if (sampleNumber && sampleNumber.length) {
        keys.push({ name: 'Sample.sampleNumber' });
        values.push(sampleNumber + '%');
    }
    var sql = helper.constructSelectSQL(columns, 'Patient JOIN Sample ON Patient.id = Sample.patientId LEFT JOIN File ON Sample.sampleNumber = File.sampleNumber', keys);
    var limit = req.query.limit || 20;
    var page = req.query.page || 1;
    var orderBy = req.query.orderBy || 'name';
    var totalPage = parseInt(req.query.totalPage) || -1;
    async.parallel({
        samples: function (callback) {
            connection.myQuery(sql + ' ORDER BY ? LIMIT ?, ?', values.concat([orderBy, (page - 1) * limit, page * limit]))
                .then(function (rows) {
                    samples = [];
                    _.each(rows, function (sample) {
                        samples.push({
                            patientId: sample.id,
                            name: sample.name,
                            age: helper.calAge(sample.dob),
                            dob: sample.dob,
                            gender: sample.gender,
                            hospitalNumber: sample.hospitalNumber,
                            pathologicNumber: sample.pathologicNumber,
                            clinicalDiagnosis: sample.clinicalDiagnosis,
                            patientComment: sample.patientComment,
                            sampleId: sample.sampleId,
                            sampleNumber: sample.sampleNumber,
                            material: sample.material,
                            site: sample.site,
                            tumorCellContent: sample.tumorCellContent,
                            pathologicDiagnosis: sample.pathologicDiagnosis,
                            inspectionDate: sample.inspectionDate,
                            sampleComment: sample.sampleComment,
                            status: helper.getSampleStatus(sample.sampleStatus),
                            url: sample.url
                        });
                    })
                    callback(null, samples);
                })
                .fail(function (err) {
                    callback(err, null);
                });
        },
        totalPage: function (callback) {
            if (totalPage != -1) {
                callback(null, req.query.totalPage);
            } else {
                connection.myQuery(helper.constructSelectSQL(['COUNT(*) AS count'], 'Patient JOIN Sample ON Patient.id = Sample.patientId', keys), values) 
                    .then(function (result) {
                        callback(null, Math.ceil(result[0].count / limit));
                    })
                    .fail(function (err) {
                        callback(err, null);
                    });
            }
        }
    },
        function (err, results) {
            if (err) {
                log.d('Error when searching sample: ' + err.message);
                return res.status(500).json({ success: false, error: err.code, message: err.message || 'Unknown' });
            } else {
                return res.json(results);
            }
        });
};

exports.retrieve = function (req, res) {
    var columns = ['Patient.id', 'Patient.name', 'gender', 'dob', 'hospitalNumber', 'pathologicNumber', 'clinicalDiagnosis', 'Patient.comment AS patientComment',
        'Sample.id AS sampleId', 'Sample.sampleNumber', 'material', 'site', 'tumorCellContent',
        'pathologicDiagnosis', 'inspectionDate', 'Sample.comment AS sampleComment', 'File.status AS sampleStatus', 'File.url'];
    var id = req.query.id;
    connection.myQuery(helper.constructSelectSQL(columns, 'Patient JOIN Sample ON Patient.id = Sample.patientId LEFT JOIN File ON Sample.sampleNumber = File.sampleNumber',
        [{ name: 'Sample.id', exact: 1 }]), [id])
        .then(function (rows) {
            var sample = (rows && rows.length) ? {
                patientId: rows[0].id,
                name: rows[0].name,
                age: helper.calAge(rows[0].dob),
                gender: rows[0].gender,
                hospitalNumber: rows[0].hospitalNumber,
                pathologicNumber: rows[0].pathologicNumber,
                clinicalDiagnosis: rows[0].clinicalDiagnosis,
                patientComment: rows[0].patientComment,
                sampleId: rows[0].sampleId,
                sampleNumber: rows[0].sampleNumber,
                material: rows[0].material,
                site: rows[0].site,
                tumorCellContent: rows[0].tumorCellContent,
                pathologicDiagnosis: rows[0].pathologicDiagnosis,
                inspectionDate: rows[0].inspectionDate,
                sampleComment: rows[0].sampleComment,
                status: helper.getSampleStatus(rows[0].sampleStatus),
                url: rows[0].url
            } :
            'No such sample, please verify';
            return res.json({success: true, sample: sample});
        })
        .fail(function(err) {
            log.d('Error when retrieving sample info: ' + err.message);
            return res.status(500).json({ success: false, error: err.code, message: err.message || 'Unknown' });
        });
};

exports.getWaitingToProcess = function (req, res) {
    var columns = ['Patient.id', 'Patient.name', 'gender', 'dob', 'hospitalNumber', 'pathologicNumber', 'clinicalDiagnosis', 'Patient.comment AS patientComment', 
        'Sample.id AS sampleId', 'Sample.sampleNumber', 'material', 'site', 'tumorCellContent',
        'pathologicDiagnosis', 'inspectionDate', 'Sample.comment AS sampleComment', 'File.status AS sampleStatus'];
    var lowBound = -20;
    var highBound = 1;
    connection.myQuery(helper.constructSelectSQL(columns, 'Patient JOIN Sample ON Patient.id = Sample.patientId LEFT JOIN File ON Sample.sampleNumber = File.sampleNumber',
        [{ name: 'File.status', low: 1 }, { name: 'File.status', high: 1 }]), [lowBound, highBound])
        .then(function (rows) {
            samples = _.map(rows, function (sample) {
                return {
                    patientId: sample.id,
                    name: sample.name,
                    gender: sample.gender,
                    age: helper.calAge(sample.dob),
                    gender: sample.gender,
                    hospitalNumber: sample.hospitalNumber,
                    pathologicNumber: sample.pathologicNumber,
                    clinicalDiagnosis: sample.clinicalDiagnosis,
                    patientComment: sample.patientComment,
                    sampleId: sample.sampleId,
                    sampleNumber: sample.sampleNumber,
                    material: sample.material,
                    site: sample.site,
                    tumorCellContent: sample.tumorCellContent,
                    pathologicDiagnosis: sample.pathologicDiagnosis,
                    inspectionDate: sample.inspectionDate,
                    sampleComment: sample.sampleComment,
                    status: helper.getSampleStatus(sample.sampleStatus)
                };
            });
            return res.json({ success: true, samples: samples });
        })
        .fail(function (err) {
            log.d('Error when getting waiting to process sample: ' + err.message);
            return res.status(500).json({ success: false, error: err.code, message: err.message || 'Unknown' });
        });
};

exports.getWaitingToConfirm = function (req, res) {
    var columns = ['Patient.id', 'Patient.name', 'gender', 'dob', 'hospitalNumber', 'pathologicNumber', 'clinicalDiagnosis', 'Patient.comment AS patientComment', 
        'Sample.id AS sampleId', 'Sample.sampleNumber', 'material', 'site', 'tumorCellContent',
        'pathologicDiagnosis', 'inspectionDate', 'Sample.comment AS sampleComment', 'File.status AS sampleStatus', 'File.url'];
    var waitingToConfirm = 2;
    connection.myQuery(helper.constructSelectSQL(columns, 'Patient JOIN Sample ON Patient.id = Sample.patientId LEFT JOIN File ON Sample.sampleNumber = File.sampleNumber',
        [{ name: 'File.status', exact: 1 }]), [waitingToConfirm])
        .then(function (rows) {
            samples = _.map(rows, function (sample) {
                return {
                    patientId: sample.id,
                    name: sample.name,
                    gender: sample.gender,
                    age: helper.calAge(sample.dob),
                    gender: sample.gender,
                    hospitalNumber: sample.hospitalNumber,
                    pathologicNumber: sample.pathologicNumber,
                    clinicalDiagnosis: sample.clinicalDiagnosis,
                    patientComment: sample.patientComment,
                    sampleId: sample.sampleId,
                    sampleNumber: sample.sampleNumber,
                    material: sample.material,
                    site: sample.site,
                    tumorCellContent: sample.tumorCellContent,
                    pathologicDiagnosis: sample.pathologicDiagnosis,
                    inspectionDate: sample.inspectionDate,
                    sampleComment: sample.sampleComment,
                    status: helper.getSampleStatus(sample.sampleStatus),
                    url: sample.url
                };
            });
            return res.json({ success: true, samples: samples });
        })
        .fail(function (err) {
            log.d('Error when getting waiting to process sample: ' + err.message);
            return res.status(500).json({ success: false, error: err.code, message: err.message || 'Unknown' });
        });
};

exports.confirm = function(req, res) {
    var body = req.body;
    var id = body.id;
    var confirmed = 3;
    connection.myQuery(helper.constructUpdateSQL(['File.status'], 'Sample JOIN File ON Sample.sampleNumber = File.sampleNumber', [{name: 'Sample.id', exact: 1}]), [confirmed, id])
    .then(function(result) {
        if (result.affectedRows) {
            return res.json({success: true, confirmedId: id});
        }
        log.d('Cannot confirm because there is no matching sample');
        return res.status(401).json({success: false, error: 'No such sample' });
    })
    .fail(function(err) {
        log.d('Error when confirming exsting sample: ' + err.message);
        return res.status(500).json({ success: false, error: err.code, message: err.message || 'Unknown' });
    });
};

exports.getPDF = function(req, res) {
    var id = req.query.id;
    // get the pdf file url to the report
    connection.myQuery(helper.constructSelectSQL(['File.url'], 'Sample JOIN File ON Sample.sampleNumber = File.sampleNumber', [{name: 'Sample.id', exact: 1}]), [id])
    .then(function(result) {
        if (result && result.length) {
            return res.json({sucess: true, file: result[0].url});
        }
        log.d('Cannot get file');
        return res.status(401).json({success: true, error: 'No such pdf file yet'});
    })
    .fail(function(err) {
        log.d('Error when getting report: ' + err.message);
        return res.status(500).json({ success: false, error: err.code, message: err.message || 'Unknown' });
    })
};