var connection = require('../mysqlConnection')
var mysql = require('mysql')
var helper = require('../helper.js')
var async = require('async')

exports.search = function (req, res) {
    // search for existing sample
    var body = req.body;
    var sampleNumber = body.sampleNumber;
    var material = body.material;
    var site = body.site;
    var tumorCellContent = body.tumorCellContent;
    var pathologicDiagnosis = body.pathologicDiagnosis;
    var inspectionDate = body.inspectionDate;
    var comment = body.comment;
    if (!helper.validationCheck([sampleNumber, inspectionDate])) {
        res.status(400).json({ success: false, error: 'Missing key parameters' });
    }
    var keys = [];
    var values = [];
    var columns = ['Patient.name', 'gender', 'age', 'hospitalNumber', 'pathologicNumber', 'clinicalDiagnosis', 'Patient.comment AS patientComment', 'sampleNumber', 'material', 'site', 'tumorCellContent',
        'pathologicDiagnosis', 'inspectionDate', 'Sample.comment AS sampleComment', 'Sample.status AS sampleStatus'];
    keys.push({ name: 'Sample.sampleNumber', exact: 1 });
    keys.push({ name: 'Sample.inspectionDate', exact: 1 });
    values.push(sampleNumber);
    values.push(inspectionDate);
    if (material && material.length) {
        keys.push({ name: 'Sample.material' });
        values.push(material);
    }
    if (site && site.length) {
        keys.push({ name: 'Sample.site' });
        values.push(site);
    }
    if (tumorCellContent && tumorCellContent.length) {
        keys.push({ name: 'Sample.tumorCellContent' });
        values.push(tumorCellContent);
    }
    if (pathologicDiagnosis && pathologicDiagnosis.length) {
        keys.push({ name: 'Sample.pathologicDiagnosis' });
        values.push(pathologicDiagnosis);
    }
    if (comment && comment.length) {
        keys.push({ name: 'Sample.comment' });
        values.push(comment);
    }
    var limit = req.query.limit || 20;
    var page = req.query.page || 1;
    var totalPage = parseInt(req.query.totalPage) || -1;
    async.parallel({
        patients: function (callback) {
            connection.myQuery(helper.constructSelectSQL(columns, 'Sample JOIN Patient ON Sample.patientId = Patient.id', keys) + ' LIMIT ?, ?', values.concat([(page - 1) * limit, page * limit]))
                .then(function (rows) {
                    samples = [];
                    _.each(rows, function (sample) {
                        samples.push({
                            id: sample.id,
                            patientId: sample.patientId,
                            sampleNumber: sample.sampleNumber,
                            material: sample.material,
                            site: sample.site,
                            tumorCellContent: sample.tumorCellContent,
                            pathologicDiagnosis: sample.pathologicDiagnosis,
                            inspectionDate: sample.inspectionDate,
                            reportDate: sample.reportDate,
                            comment: sample.comment,
                            status: sample.status
                        });
                    });
                    callback(null, samples);
                })
                .fail(function (err) {
                    callback(err, null);
                });
        },
        totalPage: function (callback) {
            if (totalPage != -1) {
                callback(null, req.query.totalPage);
            } else {
                connection.myQuery('SELECT count(*) AS count FROM Patient')
                    .then(function (result) {
                        callback(null, Math.ceil(result[0].count / limit));
                    })
                    .fail(function (err) {
                        callback(err, null);
                    });
            }
        }
    },
        function (err, results) {
            if (err) {
                log.d('Error when searching patient');
                return res.status(500).json({ success: false, error: err.code, message: err.message || 'Unknown' });
            } else {
                return res.json(results);
            }
        });
};

exports.create = function (req, res) {
    // create new sample label
    var body = req.body;
    var patientId = body.patientId;
    var sampleNumber = body.sampleNumber;
    var material = body.material;
    var site = body.site;
    var tumorCellContent = body.tumorCellContent;
    var pathologicDiagnosis = body.pathologicDiagnosis;
    var inspectionDate = body.inspectionDate;
    var comment = body.comment;
    if (!helper.validationCheck([patientId, sampleNumber, inspectionDate])) {
        return res.status(400).json({ success: false, error: 'Missing key parameters' });
    } else {
        connection.myQuery('INSERT INTO Sample SET patientId = ?, sampleNumber = ?, material = ?, site = ?, tumorCellContent = ?, pathologicDiagnosis = ?, inspectionDate = ?, comment = ?, createTime = now()',
            [patientId, sampleNumber, material, site, tumorCellContent, pathologicDiagnosis, inspectionDate, comment])
            .then(function (result) {
                var id = result.insertId;
                return res.json({ success: true, sampleId: id });
            })
            .fail(function (err) {
                log.d('Error when creating new sample');
                return res.status(500).json({ success: false, error: err.code, message: err.message || 'Unknown' });
            });
    }
};

exports.edit = function (req, res) {
    res.status(500).json({ success: false, error: err.code, message: err.message || 'Unknown' });
}



// (function() {
//     console.log(helper.constructSelectSQL(['*'], 'User', [{name: 'password', exact: 1}, {name: 'username',high: 1}, {name: 'whatever', low: 1}, {name: 'whichever'}]));
// })();
