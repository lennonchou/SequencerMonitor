var connection = require('../mysqlConnection.js')
var mysql = require('mysql')
var _ = require('underscore')
var log = require('../log.js')
var helper = require('../helper.js')
var async = require('async')

exports.create = function(req, res) {
    var body = req.body;
    var name = body.name;
    var dob = body.dob;
    var gender = body.gender;
    var hospitalNumber = body.hospitalNumber;
    var pathologicNumber = body.pathologicNumber;
    // validation check
    if (!helper.validationCheck(name)) {
        res.status(400).json({success: false, error: 'Missing key parameters'});
    }
    connection.myQuery('INSERT INTO Patient(name, dob, gender, hospitalNumber, pathologicNumber, createTime) VALUES(?, ?, ?, ?, ?, now())', [name, dob, gender, hospitalNumber, pathologicNumber])
    .then(function(row) {
        var id = row.insertId;
        res.json({success: true, patientId: id});
    })
    .fail(function(err) {
        log.d('Error when creating new patient');
        res.status(500).json({success: false, error: err.code, message: err.message || 'Unknown'});
    });
};

exports.edit = function(req, res) {
    var body = req.body;
    var name = body.name;
    var dob = body.dob;
    var gender = body.gender;
    var hospitalNumber = body.hospitalNumber;
    var pathologicNumber = body.pathologicNumber;
    var id = body.id;
    if (!helper.validationCheck(name, id)) {
        res.status(400).json({success: false, error: 'Missing key parameters'});
    }
    connection.myQuery('UPDATE Patient SET name = ?, dob = ?, gender = ?, hospitalNumber = ?, pathologicNumber = ? WHERE id = ?', [name, dob, gender, hospitalNumber, pathologicNumber, id])
    .then(function(result) {
        res.json({success: true});
    })
    .fail(function(err) {
        log.d('Error when editing exsting patient');
        res.status(500).json({success: false, error: err.code, message: err.message || 'Unknown'});
    })
};

exports.delete = function(req, res) {
    var body = req.body;
    var id = body.id;
    if (!helper.validationCheck(id)) {
        res.status(400).json({success: false, error: 'Missing id'});
    }
    connection.myQuery('DELETE FROM Patient WHERE id = ?', [id])
    .then(function(result) {
        if (result.affectedRows) {
            res.json({success: true, patiendId: id});
        }
        log.d('No such patient');
        res.status(401).json({success: false, error: 'No such patient'});
    })
    .fail(function(err) {
        log.d('Error when deleting exsting patient');
        res.status(500).json({success: false, error: err.code, message: err.message || 'Unknown'});
    })
}

exports.list = function (req, res) {
    var limit = req.query.limit || 20;
    var page = req.query.page || 1;
    var orderBy = req.query.orderBy || 'name';
    var totalPage = parseInt(req.query.totalPage) || -1;
    async.parallel({
        patients: function(callback) {
            connection.myQuery('SELECT * FROM Patient ORDER BY ? LIMIT ?, ?', [orderBy, (page - 1) * limit, page * limit])
            .then(function(rows) {
                patients = [];
                _.each(rows, function(patient) {
                    patients.push({
                        id: patient.id,
                        name: patient.name,
                        dob: patient.dob,
                        gender: patient.gender,
                        hospitalNumber: patient.hospitalNumber,
                        pathologicNumber: patient.pathologicNumber,
                        comment: patient.comment
                    });
                });
                callback(null, patients);
            })
            .fail(function(err) {
                callback(err, null);
            });
        },
        totalPage: function(callback) {
            if (totalPage != -1) {
                callback(null, req.query.totalPage);
            } else {
                connection.myQuery('SELECT count(*) AS count FROM Patient')
                .then(function(result) {
                    callback(null, result[0].count);
                })
                .fail(function(err) {
                    callback(err, null);
                });
            }
        }
    }, 
    function(err, results) {
        if (err) {
            log.d('Error when getting patient list');
            res.status(500).json({success: false, error: err.code, message: err.message || 'Unknown'});
        } else {
            res.json(results);
        }
    });
};

exports.search = function(req, res) {

};

// (function() {
//     var body = {};
//     var name = '';
//     var dob = body.dob;
//     var gender = 'male';
//     var medicalCareId = body.medicalCareId;
//     var medicationId = body.medicationId;
//     console.log(helper.validationCheck([name, gender]));
// })();