var log = require('./log.js');
var settings = require('./settings');
var Q = require('q');
var mysql = require('mysql');
var pool = mysql.createPool(settings.mysqlPool);

exports.myQuery = function myQuery(sql, params) {

  var deferred = Q.defer();
  pool.getConnection(function (err, connection) {

    if (err) {
      log.d('Error in connection with database: ' + err.message);
      err.message = 'Failed to make connection';
      deferred.reject(new Error(err));
      return;
    }
    log.d('Connection success');
    var query = mysql.format(sql, params);
    log.d('Query = ' + query);
    connection.query(query, function (err, rows) {
      //release the connection regardless
      connection.release();
      if (!err) {
        //if no error, put result into promise
        deferred.resolve(rows);
      } else {
        //if error, put error into promise
        log.d('Error in query: ' + err.message);
        // err.message = 'Query error';
        deferred.reject(new Error(err));
      }
    });
    connection.removeAllListeners('error');
    //error handler for connection
    connection.on('error', function (err) {
      log.d('Connection error: ' + err.message);
      try {
        connection.release();
      } catch (e) {
        log.d('Connection release error: ' + e.message);
      }
      err.message = 'Connection internal error';
      deferred.reject(new Error(err));
      return;
    });
  });

  return deferred.promise;
};

exports.myTransactionQuery = function myQuery(sql1, params1, sql2, params2) {

  var deferred = Q.defer();
  pool.getConnection(function (err, connection) {

    if (err) {
      log.d('Error in connection with database: ' + err.message);
      err.message = 'Failed to make connection';
      deferred.reject(new Error(err));
      return;
    }
    log.d('Connection success');
    var query1 = mysql.format(sql1, params1);
    log.d('Query1 = ' + query1);
    connection.beginTransaction(function (err) {
      if (err) {
        return deferred.reject(new Error(err));
      }
      connection.query(query1, function (err, rows) {
        //release the connection regardless
        connection.release();
        if (!err) {
          //if no error, query the next sql
          var values = [rows.insertId];
          var query2 = mysql.format(sql2, values.concat(params2));
          log.d('Query2 = ' + query2);
          connection.query(query2, function (err, rows) {
            if (err) {
              return connection.rollback(function() {
                log.d('Error in query2: ' + err.message);
                deferred.reject(new Error(err));
              });
            }
            connection.commit(function(err) {
              if (err) {
                return connection.rollback(function() {
                  log.d('Error in commit: ' + err.message);
                  deferred.reject(new Error(err));
                });
              }
              return deferred.resolve(rows);
            });
          });
        } else {
          //if error, rollback the change and put error into promise
          return connection.rollback(function () {
            log.d('Error in query1: ' + err.message);
            // err.message = 'Query error';
            deferred.reject(new Error(err));
          });
        }
      });
    });
    connection.removeAllListeners('error');
    //error handler for connection
    connection.on('error', function (err) {
      log.d('Connection error: ' + err.message);
      try {
        connection.release();
      } catch (e) {
        log.d('Connection release error: ' + e.message);
      }
      err.message = 'Connection internal error';
      deferred.reject(new Error(err));
      return;
    });
  });

  return deferred.promise;
};
