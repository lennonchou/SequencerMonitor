var express = require('express');
var router = express.Router();
var log = require('./log.js');
var jwt = require('jsonwebtoken');
var settings = require('./settings');

var patient = require('./webRouter/patient.js');
var sample = require('./webRouter/sample.js');
var user = require('./webRouter/user.js');

router.post('/user/sign_in', user.signIn);
router.post('/user/sign_up', user.signUp);
router.post('/user/reset_password', user.resetPwd);

// router middleware to verify a token
if (settings.authON) {
  log.d('Authenticatio is on');
  router.use(function (req, res, next) {

    // check header or url parameters or post parameters for token
    var token = req.body.token || req.query.token || req.headers['x-access-token'];
    // decode token
    if (token) {
      log.d('Has token: ' + token);
      // verifies secret and checks exp
      jwt.verify(token, settings.secretKey, function (err, payload) {
        
        if (err) {
          // handle error
          log.d('Error when decrypting token');
          res.status(401).json({
            success: false,
            error: 'Invalid token'
          });
        } else {
          // if everything is good, save to request for use in other routes
          log.d('PAYLOAD: ' + JSON.stringify(payload));
          req.payload = payload;
        }
      });

    } else {
      log.d('Has no token')
      // if there is no token
      // return an error
      res.status(401).json({
        success: false,
        error: 'No token provided'
      });

    }
  });
} else {
  router.use(function (req, res, next) {
    log.d('Auth is off, make artificial payload');
    req.payload = {
      'userId': '1',
      'role': 'admin'
    };
    next();
  });
}

router.post('/patient/create', patient.create);
router.post('/patient/edit', patient.edit);
router.post('/patient/delete', patient.delete);
router.get('/patient/list', patient.list);



module.exports = router;
